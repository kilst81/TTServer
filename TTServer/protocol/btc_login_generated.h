// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_BTCLOGIN_PROTO_LOGIN_PACKET_BODY_H_
#define FLATBUFFERS_GENERATED_BTCLOGIN_PROTO_LOGIN_PACKET_BODY_H_

#include "flatbuffers/flatbuffers.h"

namespace proto_login {
namespace packet {
namespace head {

struct Req;

struct Ack;

}  // namespace head

namespace body {

struct LOGIN_Req;

struct LOGIN_Ack;

struct LOGOUT_Req;

struct LOGOUT_Ack;

}  // namespace body
}  // namespace packet

enum class PROTOCOL : uint16_t {
  PING = 0,
  LOGIN = 4097,
  LOGOUT = 4105,
  BASE = 65535,
  MIN = PING,
  MAX = BASE
};

inline const PROTOCOL (&EnumValuesPROTOCOL())[4] {
  static const PROTOCOL values[] = {
    PROTOCOL::PING,
    PROTOCOL::LOGIN,
    PROTOCOL::LOGOUT,
    PROTOCOL::BASE
  };
  return values;
}

inline const char *EnumNamePROTOCOL(PROTOCOL e) {
  switch (e) {
    case PROTOCOL::PING: return "PING";
    case PROTOCOL::LOGIN: return "LOGIN";
    case PROTOCOL::LOGOUT: return "LOGOUT";
    case PROTOCOL::BASE: return "BASE";
    default: return "";
  }
}

enum class RESULT : uint16_t {
  SUCCESS = 0,
  FAILURE = 1,
  BASE = 65535,
  MIN = SUCCESS,
  MAX = BASE
};

inline const RESULT (&EnumValuesRESULT())[3] {
  static const RESULT values[] = {
    RESULT::SUCCESS,
    RESULT::FAILURE,
    RESULT::BASE
  };
  return values;
}

inline const char *EnumNameRESULT(RESULT e) {
  switch (e) {
    case RESULT::SUCCESS: return "SUCCESS";
    case RESULT::FAILURE: return "FAILURE";
    case RESULT::BASE: return "BASE";
    default: return "";
  }
}

namespace packet {
namespace head {

struct Req FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PROTOCOL = 4,
    VT_SESSION = 6
  };
  proto_login::PROTOCOL protocol() const {
    return static_cast<proto_login::PROTOCOL>(GetField<uint16_t>(VT_PROTOCOL, 65535));
  }
  uint32_t session() const {
    return GetField<uint32_t>(VT_SESSION, 4294967295);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint16_t>(verifier, VT_PROTOCOL) &&
           VerifyField<uint32_t>(verifier, VT_SESSION) &&
           verifier.EndTable();
  }
};

struct ReqBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_protocol(proto_login::PROTOCOL protocol) {
    fbb_.AddElement<uint16_t>(Req::VT_PROTOCOL, static_cast<uint16_t>(protocol), 65535);
  }
  void add_session(uint32_t session) {
    fbb_.AddElement<uint32_t>(Req::VT_SESSION, session, 4294967295);
  }
  explicit ReqBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ReqBuilder &operator=(const ReqBuilder &);
  flatbuffers::Offset<Req> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Req>(end);
    return o;
  }
};

inline flatbuffers::Offset<Req> CreateReq(
    flatbuffers::FlatBufferBuilder &_fbb,
    proto_login::PROTOCOL protocol = proto_login::PROTOCOL::BASE,
    uint32_t session = 4294967295) {
  ReqBuilder builder_(_fbb);
  builder_.add_session(session);
  builder_.add_protocol(protocol);
  return builder_.Finish();
}

struct Ack FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PROTOCOL = 4,
    VT_RESULT = 6,
    VT_CODE = 8
  };
  proto_login::PROTOCOL protocol() const {
    return static_cast<proto_login::PROTOCOL>(GetField<uint16_t>(VT_PROTOCOL, 65535));
  }
  proto_login::RESULT result() const {
    return static_cast<proto_login::RESULT>(GetField<uint16_t>(VT_RESULT, 65535));
  }
  uint16_t code() const {
    return GetField<uint16_t>(VT_CODE, 65535);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint16_t>(verifier, VT_PROTOCOL) &&
           VerifyField<uint16_t>(verifier, VT_RESULT) &&
           VerifyField<uint16_t>(verifier, VT_CODE) &&
           verifier.EndTable();
  }
};

struct AckBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_protocol(proto_login::PROTOCOL protocol) {
    fbb_.AddElement<uint16_t>(Ack::VT_PROTOCOL, static_cast<uint16_t>(protocol), 65535);
  }
  void add_result(proto_login::RESULT result) {
    fbb_.AddElement<uint16_t>(Ack::VT_RESULT, static_cast<uint16_t>(result), 65535);
  }
  void add_code(uint16_t code) {
    fbb_.AddElement<uint16_t>(Ack::VT_CODE, code, 65535);
  }
  explicit AckBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  AckBuilder &operator=(const AckBuilder &);
  flatbuffers::Offset<Ack> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Ack>(end);
    return o;
  }
};

inline flatbuffers::Offset<Ack> CreateAck(
    flatbuffers::FlatBufferBuilder &_fbb,
    proto_login::PROTOCOL protocol = proto_login::PROTOCOL::BASE,
    proto_login::RESULT result = proto_login::RESULT::BASE,
    uint16_t code = 65535) {
  AckBuilder builder_(_fbb);
  builder_.add_code(code);
  builder_.add_result(result);
  builder_.add_protocol(protocol);
  return builder_.Finish();
}

}  // namespace head

namespace body {

struct LOGIN_Req FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_USER_TOKEN = 4
  };
  const flatbuffers::String *user_token() const {
    return GetPointer<const flatbuffers::String *>(VT_USER_TOKEN);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_USER_TOKEN) &&
           verifier.VerifyString(user_token()) &&
           verifier.EndTable();
  }
};

struct LOGIN_ReqBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_user_token(flatbuffers::Offset<flatbuffers::String> user_token) {
    fbb_.AddOffset(LOGIN_Req::VT_USER_TOKEN, user_token);
  }
  explicit LOGIN_ReqBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  LOGIN_ReqBuilder &operator=(const LOGIN_ReqBuilder &);
  flatbuffers::Offset<LOGIN_Req> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<LOGIN_Req>(end);
    return o;
  }
};

inline flatbuffers::Offset<LOGIN_Req> CreateLOGIN_Req(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> user_token = 0) {
  LOGIN_ReqBuilder builder_(_fbb);
  builder_.add_user_token(user_token);
  return builder_.Finish();
}

inline flatbuffers::Offset<LOGIN_Req> CreateLOGIN_ReqDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *user_token = nullptr) {
  auto user_token__ = user_token ? _fbb.CreateString(user_token) : 0;
  return proto_login::packet::body::CreateLOGIN_Req(
      _fbb,
      user_token__);
}

struct LOGIN_Ack FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_USER_NICK = 4
  };
  const flatbuffers::String *user_nick() const {
    return GetPointer<const flatbuffers::String *>(VT_USER_NICK);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_USER_NICK) &&
           verifier.VerifyString(user_nick()) &&
           verifier.EndTable();
  }
};

struct LOGIN_AckBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_user_nick(flatbuffers::Offset<flatbuffers::String> user_nick) {
    fbb_.AddOffset(LOGIN_Ack::VT_USER_NICK, user_nick);
  }
  explicit LOGIN_AckBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  LOGIN_AckBuilder &operator=(const LOGIN_AckBuilder &);
  flatbuffers::Offset<LOGIN_Ack> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<LOGIN_Ack>(end);
    return o;
  }
};

inline flatbuffers::Offset<LOGIN_Ack> CreateLOGIN_Ack(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> user_nick = 0) {
  LOGIN_AckBuilder builder_(_fbb);
  builder_.add_user_nick(user_nick);
  return builder_.Finish();
}

inline flatbuffers::Offset<LOGIN_Ack> CreateLOGIN_AckDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *user_nick = nullptr) {
  auto user_nick__ = user_nick ? _fbb.CreateString(user_nick) : 0;
  return proto_login::packet::body::CreateLOGIN_Ack(
      _fbb,
      user_nick__);
}

struct LOGOUT_Req FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TEST1 = 4,
    VT_TEST2 = 6
  };
  uint32_t test1() const {
    return GetField<uint32_t>(VT_TEST1, 0);
  }
  uint32_t test2() const {
    return GetField<uint32_t>(VT_TEST2, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_TEST1) &&
           VerifyField<uint32_t>(verifier, VT_TEST2) &&
           verifier.EndTable();
  }
};

struct LOGOUT_ReqBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_test1(uint32_t test1) {
    fbb_.AddElement<uint32_t>(LOGOUT_Req::VT_TEST1, test1, 0);
  }
  void add_test2(uint32_t test2) {
    fbb_.AddElement<uint32_t>(LOGOUT_Req::VT_TEST2, test2, 0);
  }
  explicit LOGOUT_ReqBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  LOGOUT_ReqBuilder &operator=(const LOGOUT_ReqBuilder &);
  flatbuffers::Offset<LOGOUT_Req> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<LOGOUT_Req>(end);
    return o;
  }
};

inline flatbuffers::Offset<LOGOUT_Req> CreateLOGOUT_Req(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t test1 = 0,
    uint32_t test2 = 0) {
  LOGOUT_ReqBuilder builder_(_fbb);
  builder_.add_test2(test2);
  builder_.add_test1(test1);
  return builder_.Finish();
}

struct LOGOUT_Ack FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TEST1 = 4,
    VT_TEST2 = 6,
    VT_TEST3 = 8,
    VT_TEST4 = 10
  };
  uint32_t test1() const {
    return GetField<uint32_t>(VT_TEST1, 0);
  }
  uint32_t test2() const {
    return GetField<uint32_t>(VT_TEST2, 0);
  }
  uint32_t test3() const {
    return GetField<uint32_t>(VT_TEST3, 0);
  }
  uint32_t test4() const {
    return GetField<uint32_t>(VT_TEST4, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_TEST1) &&
           VerifyField<uint32_t>(verifier, VT_TEST2) &&
           VerifyField<uint32_t>(verifier, VT_TEST3) &&
           VerifyField<uint32_t>(verifier, VT_TEST4) &&
           verifier.EndTable();
  }
};

struct LOGOUT_AckBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_test1(uint32_t test1) {
    fbb_.AddElement<uint32_t>(LOGOUT_Ack::VT_TEST1, test1, 0);
  }
  void add_test2(uint32_t test2) {
    fbb_.AddElement<uint32_t>(LOGOUT_Ack::VT_TEST2, test2, 0);
  }
  void add_test3(uint32_t test3) {
    fbb_.AddElement<uint32_t>(LOGOUT_Ack::VT_TEST3, test3, 0);
  }
  void add_test4(uint32_t test4) {
    fbb_.AddElement<uint32_t>(LOGOUT_Ack::VT_TEST4, test4, 0);
  }
  explicit LOGOUT_AckBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  LOGOUT_AckBuilder &operator=(const LOGOUT_AckBuilder &);
  flatbuffers::Offset<LOGOUT_Ack> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<LOGOUT_Ack>(end);
    return o;
  }
};

inline flatbuffers::Offset<LOGOUT_Ack> CreateLOGOUT_Ack(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t test1 = 0,
    uint32_t test2 = 0,
    uint32_t test3 = 0,
    uint32_t test4 = 0) {
  LOGOUT_AckBuilder builder_(_fbb);
  builder_.add_test4(test4);
  builder_.add_test3(test3);
  builder_.add_test2(test2);
  builder_.add_test1(test1);
  return builder_.Finish();
}

}  // namespace body

namespace head {

}  // namespace head

namespace body {

}  // namespace body
}  // namespace packet
}  // namespace proto_login

#endif  // FLATBUFFERS_GENERATED_BTCLOGIN_PROTO_LOGIN_PACKET_BODY_H_
